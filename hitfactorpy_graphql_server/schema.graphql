enum Classification {
    GM
    M
    A
    B
    C
    D
    U
    UNKNOWN
}

enum PowerFactor {
    MAJOR
    MINOR
    UNKNOWN
}

enum Division {
    PCC
    OPEN
    LIMITED
    CARRY_OPTICS
    LIMITED_10
    PRODUCTION
    SINGLE_STACK
    REVOLVER
    UNKNOWN
}

enum Scoring {
    COMSTOCK
    VIRGINIA
    FIXED_TIME
    CHRONO
    UNKNOWN
}

enum MatchLevel {
    I
    II
    III
    IV
}

type ParsedMatchReport {
    id: String!
    name: String
    matchLevel: MatchLevel
    competitors: [ParsedMatchReportCompetitor]
    stages: [ParsedMatchReportStage]
}

type ParsedMatchReportCompetitor {
    id: String!
    match: ParsedMatchReport!
    memberNumber: String
    firstName: String
    lastName: String
    division: Division
    classification: Classification
    powerFactor: PowerFactor
    dq: Boolean
    reentry: Boolean
    stageScores: [ParsedMatchReportStageScore]
}

type ParsedMatchReportStage {
    id: String!
    match: ParsedMatchReport!
    name: String
    minRounds: Int!
    maxPoints: Int!
    classifier: Boolean!
    classifierNumber: String
    stageNumber: Int
}

type ParsedMatchReportStageScore {
    id: String!
    match: ParsedMatchReport!
    stage: ParsedMatchReportStage!
    competitor: ParsedMatchReportCompetitor!
    a: Int!
    c: Int!
    d: Int!
    m: Int!
    npm: Int!
    ns: Int!
    procedural: Int!
}

type parsedMatchReportResult {
    data: ParsedMatchReport
    success: Boolean!
    errors: [String]
}

type parsedMatchReportsResult {
    data: [ParsedMatchReport]
    success: Boolean!
    errors: [String]
}

type Query {
    parsedMatchReport(reportId: String!): parsedMatchReportResult
    parsedMatchReports: parsedMatchReportsResult
}

type Mutation {
    updateParsedMatchReport(reportId: String!): parsedMatchReportResult
}

type Subscription {
    parsedMatchReport(reportId: String!): ParsedMatchReport
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
